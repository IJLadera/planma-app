"""
Django settings for planmaDB project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
from celery.schedules import crontab
import environ
import os
print(os.getenv("REDIS_URL"))
import json
import firebase_admin
from firebase_admin import credentials
import dj_database_url


env = environ.Env(
    # Set casting and default values if needed
    # DB_PORT=(int, 5432),  # Cast DB_PORT to int, default to 5432
)

# Read .env file (if it exists)
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

print("ðŸ”§ REDIS_URL:", os.getenv("REDIS_URL"))

# âœ… Define Firebase credential path before using it
firebase_cred_path = os.getenv("FIREBASE_CREDENTIALS_FILE")
# Initialize Firebase App once
if firebase_cred_path and not firebase_admin._apps:
    cred = credentials.Certificate(json.loads(firebase_cred_json))
    firebase_admin.initialize_app(cred)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-slqnuagt*a5=ri*ch72$pylh4^567(r@j+r6oco3knc(2f5^5t'
# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

SECRET_KEY = os.getenv("SECRET_KEY", "fallback-secret-key")
load_dotenv(BASE_DIR / ".env")
DEBUG = os.getenv("DEBUG", "False").lower() in ["1", "true", "yes"]

RAILWAY_DOMAIN = os.getenv("RAILWAY_PUBLIC_DOMAIN", "localhost")
ALLOWED_HOSTS = [RAILWAY_DOMAIN, 'localhost', '127.0.0.1']
CSRF_TRUSTED_ORIGINS = [f"https://{RAILWAY_DOMAIN}"]


# ALLOWED_HOSTS = ['*']

CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'X-CSRFToken',
]

AUTH_USER_MODEL = "api.CustomUser"

# Application definition

INSTALLED_APPS = [
    'daphne',
    'channels',
    'rest_framework',
    'rest_framework_simplejwt',
    'djoser',
    'corsheaders',
    'django_celery_beat',

    # 'api.apps.ApiConfig',
    'api',
    
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

WSGI_APPLICATION = 'planmaDB.wsgi.application'
# Use ASGI instead of WSGI
ASGI_APPLICATION = 'planmaDB.asgi.application'

REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# Redis as channel layer (make sure Redis is installed and running)
import ssl

CHANNEL_LAYERS = {
    "default": {
        # 'BACKEND': 'channels_redis.core.InMemoryChannelLayer', 
        # For production, use Redis:
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # "hosts": [('127.0.0.1', 6379)],
            # "hosts": [('localhost', 6379)],
            # âœ… Render gives full Redis URL automatically:
            "hosts": [{
                "address": REDIS_URL,           # Your Redis URL
                "ssl": True,                    # Enable SSL for rediss://
                "ssl_cert_reqs": ssl.CERT_NONE, # Disable certificate validation (development only)
            }],
        },
    },
}


DJOSER = {
    "SERIALIZERS": {
        "user_create": "api.serializers.CustomUserCreateSerializer",
        "user": "api.serializers.CustomUserSerializer",
        },
        'LOGIN_FIELD': 'email',  # or 'username' depending on your configuration
        'USER_CREATE_PASSWORD_RETYPE': True,
        # 'TOKEN_MODEL': 'rest_framework.authtoken.models.Token',
    }

REST_FRAMEWORK={
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME' : timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'USER_ID_FIELD': 'student_id',
    'USER_ID_CLAIM': 'user_id',
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # âœ… Added before SecurityMiddleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]

ROOT_URLCONF = 'planmaDB.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# # Database
# # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'Planma DB',
#         'USER': 'postgres',
#         'PASSWORD': 'planma123',
#         'HOST': 'localhost', 
#         'PORT': '5432',
#     }
# }


# # CORS_ALLOWED_ORIGINS = [
# #     "http://localhost:52667",  # or whatever port your Flutter app uses
# #     "http://127.0.0.1:8000",  # also add this if needed
# # ]

# Database
# -------------------------------------------------------------------
# Uses Supabase PostgreSQL via .env file
import dj_database_url

DATABASES = {
    'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
}




# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

# âœ… Added: STATIC_ROOT required by Render for collectstatic
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media files (Uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "redis://localhost:6379/0")
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'UTC'
CELERY_TIMEZONE = 'Asia/Manila'
CELERY_WORKER_POOL = 'solo'
CELERY_WORKER_CONCURRENCY = 4
CELERY_TASK_ANNOTATIONS = {
    
}

CELERY_BEAT_SCHEDULE = {
    'check-reminders-every-minute': {
        'task': 'api.tasks.send_all_reminders',
        'schedule': crontab(minute='*'),  # Every minute
    }
}

# For Upstash rediss://
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'ssl_cert_reqs': ssl.CERT_NONE  # CERT_NONE
}

CELERY_REDIS_BACKEND_USE_SSL = {
    'ssl_cert_reqs': ssl.CERT_NONE  # CERT_NONE
}

print("REDIS_URL =", os.getenv("REDIS_URL"))
print("CELERY_BROKER_URL =", os.getenv("CELERY_BROKER_URL"))
print("CELERY_RESULT_BACKEND =", os.getenv("CELERY_RESULT_BACKEND"))


# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.channels': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
    },
}

# âœ… Added for HTTPS and security on Render
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True