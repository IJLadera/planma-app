"""
Django settings for planmaDB project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
from celery.schedules import crontab
import environ
import os
import json
import firebase_admin
from firebase_admin import credentials
import dj_database_url
import ssl


env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
local_env = BASE_DIR / "planmaDB" / ".env"
root_env = BASE_DIR / ".env"

if os.path.exists(local_env):
    print("✅ Loaded .env from planmaDB/")
    load_dotenv(local_env)
elif os.path.exists(root_env):
    print("✅ Loaded .env from project root")
    load_dotenv(root_env)
else:
    print("ℹ️ Running on Railway — using injected environment variables")


# ✅ Define Firebase credential path before using it
firebase_cred_json = os.getenv("FIREBASE_CREDENTIALS_JSON")

try:
    if firebase_cred_json and not firebase_admin._apps:
        # Replace escaped newlines
        cred_dict = json.loads(firebase_cred_json)
        cred_dict["private_key"] = cred_dict["private_key"].replace("\\n", "\n")

        from tempfile import NamedTemporaryFile

        with NamedTemporaryFile(mode="w+", delete=False, suffix=".json") as temp_file:
            json.dump(cred_dict, temp_file)
            temp_file.flush()
            cred = credentials.Certificate(temp_file.name)

        firebase_admin.initialize_app(cred)
        print("✅ Firebase initialized successfully")
    else:
        print("⚠️ Firebase credentials not found or app already initialized")
except Exception as e:
    print("❌ Firebase init failed:", e)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

SECRET_KEY = os.getenv("SECRET_KEY", "fallback-secret-key")
DEBUG = os.getenv("DEBUG", "False").lower() in ["1", "true", "yes"]

RAILWAY_DOMAIN = os.getenv("RAILWAY_PUBLIC_DOMAIN")

ALLOWED_HOSTS = [
    RAILWAY_DOMAIN,
    'localhost',
    '127.0.0.1',
] if RAILWAY_DOMAIN else ['localhost', '127.0.0.1']


if RAILWAY_DOMAIN:
    CSRF_TRUSTED_ORIGINS = [f"https://{RAILWAY_DOMAIN}"]


AUTH_USER_MODEL = "api.CustomUser"

# Application definition

INSTALLED_APPS = [
    'daphne',
    'channels',
    'rest_framework',
    'rest_framework_simplejwt',
    'djoser',
    'corsheaders',
    'django_celery_beat',
    'storages',  # The django-storages app

    # 'api.apps.ApiConfig',
    'api',
    
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

WSGI_APPLICATION = 'planmaDB.wsgi.application'
# Use ASGI instead of WSGI
ASGI_APPLICATION = 'planmaDB.asgi.application'

REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    },
}


DJOSER = {
    "SERIALIZERS": {
        "user_create": "api.serializers.CustomUserCreateSerializer",
        "user": "api.serializers.CustomUserSerializer",
        },
        'LOGIN_FIELD': 'email',
        'USER_CREATE_PASSWORD_RETYPE': True,
    }

REST_FRAMEWORK={
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME' : timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'USER_ID_FIELD': 'student_id',
    'USER_ID_CLAIM': 'user_id',
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'planmaDB.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
# Uses Supabase PostgreSQL via .env file
database_url = os.getenv("DATABASE_URL")
if database_url:
    print("✅ DATABASE_URL found, configuring for production.")
    DATABASES = {
        "default": dj_database_url.parse(
            database_url,
            conn_max_age=60,
            ssl_require=True
        )
    }
    DATABASES["default"]["OPTIONS"] = {"connect_timeout": 10}
else:
    print("⚠️ DATABASE_URL not found. Falling back to local SQLite.")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Manila'
USE_I18N = True
USE_TZ = True


# --- Static and Media File Configuration ---

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# --- Supabase Storage Settings ---

# ✅ CORRECTED: This is the right backend for django-storages with an S3-compatible service.
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

SUPABASE_BUCKET = os.getenv("SUPABASE_BUCKET")
SUPABASE_PROJECT_ID = os.getenv("SUPABASE_PROJECT_ID")

# --- Configure Boto3 (the underlying AWS S3 library) ---

# ✅ ADDED: Load the service role keys from your environment variables.
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")

AWS_STORAGE_BUCKET_NAME = SUPABASE_BUCKET
AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "us-east-1") # Region doesn't matter for Supabase

# ✅ CORRECTED: Use the recommended endpoint URL format.
AWS_S3_ENDPOINT_URL = f'https://{SUPABASE_PROJECT_ID}.supabase.co/storage/v1'

AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_S3_FILE_OVERWRITE = False # Recommended to avoid accidental file replacement

# --- Public URL for Media Files ---
# This defines the public-facing URL for your uploaded files.
MEDIA_URL = f'https://{SUPABASE_PROJECT_ID}.supabase.co/storage/v1/object/public/{SUPABASE_BUCKET}/'
# Note: MEDIA_ROOT is not needed when using a remote storage backend like S3/Supabase.


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration
CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Manila'
CELERY_WORKER_POOL = 'solo'
CELERY_WORKER_CONCURRENCY = 4

CELERY_BEAT_SCHEDULE = {
    'check-reminders-every-minute': {
        'task': 'api.tasks.send_all_reminders',
        'schedule': crontab(minute='*'),
    }
}

# For Upstash rediss:// with SSL
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'ssl_cert_reqs': ssl.CERT_NONE
}
CELERY_REDIS_BACKEND_USE_SSL = {
    'ssl_cert_reqs': ssl.CERT_NONE
}


# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.channels': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
    },
}

# ✅ Added for HTTPS and security on Railway/Render
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True